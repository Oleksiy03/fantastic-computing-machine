import random as rnd

def input_matrix(n):
    x=[]
    for i in range(n):
        y=[]
        s=input().split() #ділить по символу роздільника
        for j in s:
            y.append(float(j))
        if len(y)==n:
            x.append(y)
    return x

def valueCheck(s):
    while True:
        try:
            n=int(input(s))
            break
        except ValueError:
            pass
    return n 

def gen_matrix(n,a,b):
    x=[[rnd.randint(a,b) for j in range(n)] for i in range(n)]
    return x

def Print(matrix):
    for row in matrix:
        for el in row:
            print(el, end='  ')
        print()

def binary_search(mas, k):
    mid = len(mas) // 2
    low = 0
    high = len(mas) - 1
    operation = 1
    result = []
    while mas[mid][0] != k and low <= high:
        operation +=1
        if k > mas[mid][0]:
            operation += 1
            low = mid + 1
        else:
            high = mid - 1
            operation += 1
        mid = (low + high) // 2

    if low > high:
        print("Element ", k, " is not in the array!")
    else:
        print("Number of operations: ", operation)
        result.append((mas[mid][1], mas[mid][2]))
        duplicates(mid, mas, result)
    return result

def duplicates(mid, mas, result):
    element = mas[mid][0]
    el = mid + 1
    while el < len(mas) and mas[el][0] == element:
        result.append((mas[el][1],mas[el][2]))
        el += 1
    el = mid - 1
    while el >= 0 and mas[el][0] == element:
        result.append((mas[el][1],mas[el][2]))
        el -= 1

def bubbleSort(arr):
    n = len(arr)

    # Traverse through all array elements
    for i in range(n-1):
    # range(n) also work but outer loop will repeat one time more than needed.

        # Last i elements are already in place
        for j in range(0, n-i-1):

            # traverse the array from 0 to n-i-1
            # Swap if the element found is greater
            # than the next element
            if arr[j][0] > arr[j + 1][0] :
                arr[j], arr[j + 1] = arr[j + 1], arr[j]

def transform(matrix):
    n=len(matrix)
    l=[(matrix[i][j], i, j)for j in range(n) for i in range(n)]
    bubbleSort(l)
    return(l)

while True:
    c=input('Type in 1 to input a matrix yourself\n Type in 2 to generate a matrix randomly\n Type in q to end the programme\n')
    if c=='q':
        break
    elif c=='1' or c=='2':
        n=valueCheck("Type in the matrix's size: ")
        if c=='1':
            matrix=input_matrix(n)
        elif c=='2':
            a=valueCheck("Type in the start of the range: ")
            b=valueCheck("Type in the end of the range: ")
            matrix=gen_matrix(n,a,b)
            Print(matrix)
        d=valueCheck("input the element to search for: ")
        l=transform(matrix)
        res=binary_search(l, d)
        if len(res) > 0:
            print('the indexes of the element',d,' in the matrix is:', res)

    else:
        print('Incorrect form of input. Try again')
        continue
